{"ast":null,"code":"const httpHeaders = new HttpHeaders({\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Cache-Control': 'no-cache' // Cache deaktivieren\n});\n\nconst httpOptions = {\n  headers: httpHeaders\n};\nexport {};\n// alles alt, ohne restapi, hardcoded mit array\n/* @Injectable({\n  providedIn: 'root'\n  })\n  export class ProfessorService {\n  profs: Professor[] = [\n  {vorname: 'Thomas', nachname: 'Specht', kuerzel: 'SPE'},\n  {vorname: 'Michael', nachname: 'Groeschel', kuerzel: 'GRM'}\n  ];\n  constructor() { }\n\n\n  getProfessoren(): Professor[] {\n  return this.profs;\n  }\n\n  getProfessor(kuerzel: string): Professor | undefined {\n    for (const prof of this.profs) {\n    if (prof.kuerzel === kuerzel) {\n    return prof;\n    }\n    }\n    return undefined;\n    }\n\n    create(professor: Professor): Professor {\n      this.profs.push(professor);\n      return professor;\n      }\n\n\n      update(professor: Professor): Professor {\n        for (const prof of this.profs) {\n        if (prof.kuerzel === professor.kuerzel) {\n        prof.vorname = professor.vorname;\n        prof.nachname = professor.nachname;\n        prof.kuerzel = professor.kuerzel;\n        }\n        }\n        return professor;\n        }\n\n\n        delete(professorToDelete: Professor): void {\n          this.profs = this.profs.filter(\n          (element: Professor) => element.kuerzel !== professorToDelete.kuerzel);\n          }\n  }\n */","map":{"version":3,"names":["httpHeaders","HttpHeaders","httpOptions","headers"],"sources":["C:\\Users\\Julian\\Desktop\\Angular und Nodejs\\ANO-Professorenverwaltung3\\src\\app\\Professorenverwaltung\\Professor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Professor } from './Professor';\n\nconst httpHeaders: HttpHeaders = new HttpHeaders({\n  'Content-Type': 'application/json', // Typ der übermittelten Daten\n  'Accept': 'application/json', // Gewünschter Rückgabetyp\n  'Cache-Control': 'no-cache' // Cache deaktivieren\n  });\n  const httpOptions = {\n  headers: httpHeaders\n  };\n\n\n// alles alt, ohne restapi, hardcoded mit array\n/* @Injectable({\n  providedIn: 'root'\n  })\n  export class ProfessorService {\n  profs: Professor[] = [\n  {vorname: 'Thomas', nachname: 'Specht', kuerzel: 'SPE'},\n  {vorname: 'Michael', nachname: 'Groeschel', kuerzel: 'GRM'}\n  ];\n  constructor() { }\n\n\n  getProfessoren(): Professor[] {\n  return this.profs;\n  }\n\n  getProfessor(kuerzel: string): Professor | undefined {\n    for (const prof of this.profs) {\n    if (prof.kuerzel === kuerzel) {\n    return prof;\n    }\n    }\n    return undefined;\n    }\n\n    create(professor: Professor): Professor {\n      this.profs.push(professor);\n      return professor;\n      }\n\n\n      update(professor: Professor): Professor {\n        for (const prof of this.profs) {\n        if (prof.kuerzel === professor.kuerzel) {\n        prof.vorname = professor.vorname;\n        prof.nachname = professor.nachname;\n        prof.kuerzel = professor.kuerzel;\n        }\n        }\n        return professor;\n        }\n\n\n        delete(professorToDelete: Professor): void {\n          this.profs = this.profs.filter(\n          (element: Professor) => element.kuerzel !== professorToDelete.kuerzel);\n          }\n  }\n */\n"],"mappings":"AAGA,MAAMA,WAAW,GAAgB,IAAIC,WAAW,CAAC;EAC/C,cAAc,EAAE,kBAAkB;EAClC,QAAQ,EAAE,kBAAkB;EAC5B,eAAe,EAAE,UAAU,CAAC;CAC3B,CAAC;;AACF,MAAMC,WAAW,GAAG;EACpBC,OAAO,EAAEH;CACR;;AAGH;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}