{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nconst httpHeaders = new HttpHeaders({\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Cache-Control': 'no-cache' // Cache deaktivieren\n});\n\nconst httpOptions = {\n  headers: httpHeaders\n};\nexport let ProfessorService = class ProfessorService {\n  constructor(http) {\n    this.http = http;\n    this.restServiceUrl = 'http://localhost:8080/professor';\n  }\n  create(professor) {\n    const url = `${this.restServiceUrl}`;\n    return this.http.post(url, professor, httpOptions);\n  }\n  getProfessoren() {\n    return this.http.get(this.restServiceUrl, httpOptions);\n  }\n  getProfessor(id) {\n    const url = `${this.restServiceUrl}/${id}`;\n    return this.http.get(url, httpOptions);\n  }\n  update(professor) {\n    const url = `${this.restServiceUrl}/${professor.kuerzel}`;\n    return this.http.put(url, professor, httpOptions);\n  }\n  delete(professorToDelete) {\n    const url = `${this.restServiceUrl}/${professorToDelete.kuerzel}`;\n    return this.http.delete(url);\n  }\n};\nProfessorService = __decorate([Injectable({\n  providedIn: 'root'\n})], ProfessorService);\n// alles alt, ohne restapi, hardcoded mit array\n/* @Injectable({\n  providedIn: 'root'\n  })\n  export class ProfessorService {\n  profs: Professor[] = [\n  {vorname: 'Thomas', nachname: 'Specht', kuerzel: 'SPE'},\n  {vorname: 'Michael', nachname: 'Groeschel', kuerzel: 'GRM'}\n  ];\n  constructor() { }\n\n\n  getProfessoren(): Professor[] {\n  return this.profs;\n  }\n\n  getProfessor(kuerzel: string): Professor | undefined {\n    for (const prof of this.profs) {\n    if (prof.kuerzel === kuerzel) {\n    return prof;\n    }\n    }\n    return undefined;\n    }\n\n    create(professor: Professor): Professor {\n      this.profs.push(professor);\n      return professor;\n      }\n\n\n      update(professor: Professor): Professor {\n        for (const prof of this.profs) {\n        if (prof.kuerzel === professor.kuerzel) {\n        prof.vorname = professor.vorname;\n        prof.nachname = professor.nachname;\n        prof.kuerzel = professor.kuerzel;\n        }\n        }\n        return professor;\n        }\n\n\n        delete(professorToDelete: Professor): void {\n          this.profs = this.profs.filter(\n          (element: Professor) => element.kuerzel !== professorToDelete.kuerzel);\n          }\n  }\n */","map":{"version":3,"names":["Injectable","HttpHeaders","httpHeaders","httpOptions","headers","ProfessorService","constructor","http","restServiceUrl","create","professor","url","post","getProfessoren","get","getProfessor","id","update","kuerzel","put","delete","professorToDelete","__decorate","providedIn"],"sources":["C:\\Users\\Julian\\Desktop\\Angular und Nodejs\\ANO-Professorenverwaltung3\\src\\app\\Professorenverwaltung\\Professor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Professor } from './Professor';\nimport { HttpHeaders } from '@angular/common/http';\n\nconst httpHeaders: HttpHeaders = new HttpHeaders({\n  'Content-Type': 'application/json', // Typ der übermittelten Daten\n  'Accept': 'application/json', // Gewünschter Rückgabetyp\n  'Cache-Control': 'no-cache' // Cache deaktivieren\n  });\n  const httpOptions = {\n  headers: httpHeaders\n  };\n\n  @Injectable({\n    providedIn: 'root'\n    })\n    export class ProfessorService {\n    private restServiceUrl = 'http://localhost:8080/professor';\n    constructor(private http: HttpClient) { }\n    create(professor: Professor): Observable<Professor> {\n    const url = `${this.restServiceUrl}`;\n    return this.http.post<Professor>(url, professor, httpOptions);\n    }\n\n    getProfessoren(): Observable<Professor[]> {\n      return this.http.get<Professor[]>(this.restServiceUrl, httpOptions);\n      }\n      getProfessor(id: string): Observable<Professor> {\n      const url = `${this.restServiceUrl}/${id}`;\n      return this.http.get<Professor>(url, httpOptions);\n      }\n      update(professor: Professor): Observable<Professor> {\n      const url = `${this.restServiceUrl}/${professor.kuerzel}`;\n      return this.http.put<Professor>(url, professor, httpOptions);\n      }\n      delete(professorToDelete: Professor): Observable<Professor> {\n      const url = `${this.restServiceUrl}/${professorToDelete.kuerzel}`;\n      return this.http.delete<Professor>(url);\n      }\n      }\n\n\n\n// alles alt, ohne restapi, hardcoded mit array\n/* @Injectable({\n  providedIn: 'root'\n  })\n  export class ProfessorService {\n  profs: Professor[] = [\n  {vorname: 'Thomas', nachname: 'Specht', kuerzel: 'SPE'},\n  {vorname: 'Michael', nachname: 'Groeschel', kuerzel: 'GRM'}\n  ];\n  constructor() { }\n\n\n  getProfessoren(): Professor[] {\n  return this.profs;\n  }\n\n  getProfessor(kuerzel: string): Professor | undefined {\n    for (const prof of this.profs) {\n    if (prof.kuerzel === kuerzel) {\n    return prof;\n    }\n    }\n    return undefined;\n    }\n\n    create(professor: Professor): Professor {\n      this.profs.push(professor);\n      return professor;\n      }\n\n\n      update(professor: Professor): Professor {\n        for (const prof of this.profs) {\n        if (prof.kuerzel === professor.kuerzel) {\n        prof.vorname = professor.vorname;\n        prof.nachname = professor.nachname;\n        prof.kuerzel = professor.kuerzel;\n        }\n        }\n        return professor;\n        }\n\n\n        delete(professorToDelete: Professor): void {\n          this.profs = this.profs.filter(\n          (element: Professor) => element.kuerzel !== professorToDelete.kuerzel);\n          }\n  }\n */\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,WAAW,QAAQ,sBAAsB;AAElD,MAAMC,WAAW,GAAgB,IAAID,WAAW,CAAC;EAC/C,cAAc,EAAE,kBAAkB;EAClC,QAAQ,EAAE,kBAAkB;EAC5B,eAAe,EAAE,UAAU,CAAC;CAC3B,CAAC;;AACF,MAAME,WAAW,GAAG;EACpBC,OAAO,EAAEF;CACR;AAKQ,WAAMG,gBAAgB,GAAtB,MAAMA,gBAAgB;EAE7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,cAAc,GAAG,iCAAiC;EAClB;EACxCC,MAAMA,CAACC,SAAoB;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,cAAc,EAAE;IACpC,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAAYD,GAAG,EAAED,SAAS,EAAEP,WAAW,CAAC;EAC7D;EAEAU,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAc,IAAI,CAACN,cAAc,EAAEL,WAAW,CAAC;EACnE;EACAY,YAAYA,CAACC,EAAU;IACvB,MAAML,GAAG,GAAG,GAAG,IAAI,CAACH,cAAc,IAAIQ,EAAE,EAAE;IAC1C,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAYH,GAAG,EAAER,WAAW,CAAC;EACjD;EACAc,MAAMA,CAACP,SAAoB;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,cAAc,IAAIE,SAAS,CAACQ,OAAO,EAAE;IACzD,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAYR,GAAG,EAAED,SAAS,EAAEP,WAAW,CAAC;EAC5D;EACAiB,MAAMA,CAACC,iBAA4B;IACnC,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACH,cAAc,IAAIa,iBAAiB,CAACH,OAAO,EAAE;IACjE,OAAO,IAAI,CAACX,IAAI,CAACa,MAAM,CAAYT,GAAG,CAAC;EACvC;CACC;AAvBUN,gBAAgB,GAAAiB,UAAA,EAH9BtB,UAAU,CAAC;EACVuB,UAAU,EAAE;CACX,CAAC,C,EACWlB,gBAAgB,CAuB1B;AAIP;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}